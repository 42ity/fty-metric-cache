# Travis CI script
language: c

os:
- linux

sudo: false

services:
- docker

env:
- BUILD_TYPE=default
- BUILD_TYPE=default-Werror
#- BUILD_TYPE=android
#- BUILD_TYPE=check-py
#- BUILD_TYPE=cmake

before_install:
- ulimit -c
- ulimit -a -S
- ulimit -a -H
- cat /proc/sys/kernel/core_pattern

- if [ $TRAVIS_OS_NAME == "osx" ] ; then brew update; brew install binutils valgrind ; fi

matrix:
  include:
  - env: BUILD_TYPE=valgrind
    os: linux
    dist: trusty
    sudo: required
    addons:
      apt:
        packages:
        - valgrind

    script:
       # install mason
       - mkdir ./mason/
       - curl -sSfL https://github.com/mapbox/mason/archive/v0.2.0.tar.gz | tar --gunzip --extract --strip-components=1 --directory=./mason/
       # install gdb via mason
       - ./mason/mason install gdb 7.12
       # put GDB on PATH
       - export PATH=$(./mason/mason prefix gdb 7.12)/bin:${PATH}
       # install logbt
       - curl -sSfL https://github.com/mapbox/logbt/archive/v1.6.0.tar.gz | tar --gunzip --extract --strip-components=2 --exclude="*md" --exclude="test*" --directory=.
       - RESULT=0
       # Compile our demo program which will crash if
       # the CRASH_PLEASE environment variable is set
       - make
       # modify corepattern for logbt
       - sudo bash -c "echo '/tmp/logbt-coredumps/core.%p.%E' > /proc/sys/kernel/core_pattern"
       # Run the program to prompt a crash
       # Note: we capture the return code of the program here and add
       # `|| true` to ensure that travis continues past the crash
       - CRASH_PLEASE=1 ./logbt ./test || RESULT=$?
       # For the purpose of this repo we assume the test will crash so let's
       # assert that the RESULT is 139 (exit code for a segfault)
       # For a real repo you would likely assert the RESULT is zero
       - if [[ ${RESULT} != 0 ]]; then echo "expected segfault and 0 exit but instead exited with ${RESULT}" && exit 1; fi;

addons:
  apt:
    packages:
    - valgrind
    - git

# Hand off to generated script for each BUILD_TYPE
script: 
- ulimit -c unlimited -S
- ./ci_build.sh
- CRASH_PLEASE=1 ./test || RESULT=$?
- ls -l
- if [[ ${RESULT} != 0 ]]; then echo "expected segfault and 139 exit but instead exited with ${RESULT}" && exit 1; fi;
       - for i in $(find ./ -maxdepth 1 -name 'core*' -print); do gdb $(pwd)/test core* -ex "thread apply all bt" -ex "set pagination 0" -batch; done;